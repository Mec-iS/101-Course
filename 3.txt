## Start Learning Programming

### Vocabulary

An **algorithm** is a *procedure* in which some inputs get elaborated and outputs served.
An algorithm can be both hardware and software. 

Example: A router is an application of an algorithm, the electrical schema that funds the router's hardware is an algorithm; a browser is an algorithm itself as well, it's a set of instructions that perform a task. Software products are the most common family of algorithms around. 

Both perform actions in a stepwise way to achieve a result, they tend to be efficient and effective, and consistent.
In the Web protocols are software that runs on standard hardware, servers, they are both a different shapes of the concept of algorithm.
Algorithm tells and perform procedures for interpretation, translation, execution of any tasks on the Web.

**Programming languages** are languages to translate *procedures* to solve problems *into code* the computer can process.

Most of the modern programming languages use *Objects*, and are called *Object Oriented* (OO), to distinguish their approach from procedural (strictly stepwise, usually older) languages. Most of the OO languages can be used in a procedural (stepwise) way.

<u>Any programming language, or language's library or framework or protocol, is defined, or is the implementation of,  an [API](http://en.wikipedia.org/wiki/Application_programming_interface) (**Application Programming Interface**)</u>: 
 that is a collection of *functions, methods, Objects, procedures* or whatever makes any task working in that language, library or framework or protocol.

We are going to learn what is an API, a reserved key and the use of *this* keyword *through http://codecombat.com/*, a Javascript programming learning platform by gaming. Javascript is the OO programming language that works in any Web browser, in pair with HTML.

Any task implies to manage some input and outputs. They contains data, data is described by **data structures**, that are the basic standards for any data manipulation, exchange, encryption or any other possible use.

### Basic Concepts
Basic data structures are: **variables, sets, lists, dictionaries**.

```
# Variables
a = 5  
# variable assignment: *a* is now associated (referenced, pointed) to the number 5

# Sets
a = (1, 3, 5, 7)
# thisis a set of integers

# Lists (in Python, they can be also be found as vectors, arrays)
a = [1, 2, 3, 'name', 'things', variable] 
# lists are ordered sets of any kind of thing you can into a program

# Dictionaries (in Python, they can be found also as collections)
a = {'one': 'dog', 2: 'sun', 'three': 3, 5: ['one', 'two', 3] } 
# they are mapping structures, they associate a key (immutable) to a value (mutable)

# All these different kinds of data formatting/ordering/mapping have been assigned to the variable *a* in these examples
# The calculator now knows how to find them just telling it *a*

print a
# By this command we tells to print on screen the current value of *a*
```
Other kinds of data structure are **queues, stacks and trees**.

### Data Types
Any data you collect and put into a computer has a **type**, any type of data is a family that defines built-in rules and methods to process that kind of data.

There are many different kind of programming languages, they use and handle data in different ways, they can have strong-typing or weak-typing, depending on how they treat different kinds of data that happened to be in the same instruction.

Common data types are:
```
SIMPLE_TYPES = (int, long, float, boolean, string, double)
# here the variable SIMPLE_TYPES is a set of variables that represent the different types data you can find in any programming language
```

### An Example Of Common Data Structure For The Web

A very popular data structure used in server-client communications is [JSON](http://en.wikipedia.org/wiki/JSON): "an open standard format that uses human-readable text to transmit data objects consisting of attribute–value pairs." 

We introduce here this kind of data formatting for web-transmissions by presenting a JSON implementation for geolocating and draw over maps: [GEOjson](http://geojson.org/). Here an example of JSON used for this purpose:
```
{ "type": "FeatureCollection",
    "features": [
      { "type": "Feature",
        "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
        "properties": {"prop0": "value0"}
        },
         { "type": "Feature",
        "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
        "properties": {"prop0": "value0"}
        },
         { "type": "Feature",
        "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
        "properties": {"prop0": "value0"}
        },
      ]
}
```